# Setting test expectation screenshots for Playwright
name: "PR: Update Playwright Expectations"

on:
  pull_request:
    types: [labeled]
  issue_comment:
    types: [created]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    if: >
      ( github.event_name == 'pull_request' && github.event.label.name == 'New Browser Test Expectations' ) ||
      ( github.event.issue.pull_request &&
        github.event_name == 'issue_comment' &&
        (
          github.event.comment.author_association == 'OWNER' ||
          github.event.comment.author_association == 'MEMBER' ||
          github.event.comment.author_association == 'COLLABORATOR'
        ) &&
        startsWith(github.event.comment.body, '/update-playwright') )
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      pr-number: ${{ steps.pr-info.outputs.pr-number }}
      branch: ${{ steps.pr-info.outputs.branch }}
      comment-id: ${{ steps.find-update-comment.outputs.comment-id }}
    steps:
      - name: Get PR info
        id: pr-info
        run: |
          echo "pr-number=${{ github.event.number || github.event.issue.number }}" >> $GITHUB_OUTPUT
          echo "branch=$(gh pr view ${{ github.event.number || github.event.issue.number }} --repo ${{ github.repository }} --json headRefName --jq '.headRefName')" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find Update Comment
        uses: peter-evans/find-comment@b30e6a3c0ed37e7c023ccd3f1db5c6c0b0c23aad
        id: "find-update-comment"
        with:
          issue-number: ${{ steps.pr-info.outputs.pr-number }}
          comment-author: "github-actions[bot]"
          body-includes: "Updating Playwright Expectations"

      - name: Add Starting Reaction
        uses: peter-evans/create-or-update-comment@e8674b075228eee787fea43ef493e45ece1004c9
        with:
          comment-id: ${{ steps.find-update-comment.outputs.comment-id }}
          issue-number: ${{ steps.pr-info.outputs.pr-number }}
          body: |
            Updating Playwright Expectations
          edit-mode: replace
          reactions: eyes

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: ${{ steps.pr-info.outputs.branch }}
      - name: Setup frontend
        uses: ./.github/actions/setup-frontend
        with:
          include_build_step: true
      # Save expensive build artifacts (Python env, built frontend, node_modules)
      # Source code will be checked out fresh in sharded jobs
      - name: Generate cache key
        id: cache-key
        run: echo "key=$(date +%s)" >> $GITHUB_OUTPUT
      - name: Save cache
        uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: |
            ComfyUI
            dist
          key: comfyui-setup-${{ steps.cache-key.outputs.key }}

  # Sharded snapshot updates
  update-snapshots-sharded:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
    steps:
      # Checkout source code fresh (not cached)
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.setup.outputs.branch }}

      # Restore expensive build artifacts from setup job
      - name: Restore cached artifacts
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684
        with:
          fail-on-cache-miss: true
          path: |
            ComfyUI
            dist
          key: comfyui-setup-${{ needs.setup.outputs.cache-key }}

      - name: Setup ComfyUI server (from cache)
        uses: ./.github/actions/setup-comfyui-server
        with:
          launch_server: true

      - name: Setup nodejs, pnpm, reuse built frontend
        uses: ./.github/actions/setup-frontend

      - name: Setup Playwright
        uses: ./.github/actions/setup-playwright

      # Run sharded tests with snapshot updates
      - name: Update snapshots (Shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }})
        id: playwright-tests
        run: pnpm exec playwright test --update-snapshots --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
        continue-on-error: true

      # Upload updated snapshots from this shard
      - name: Upload updated snapshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snapshots-shard-${{ matrix.shardIndex }}
          path: browser_tests/**/*-snapshots/
          retention-days: 1

      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-shard-${{ matrix.shardIndex }}
          path: ./playwright-report/
          retention-days: 30

  # Merge snapshots and commit
  merge-and-commit:
    needs: [setup, update-snapshots-sharded]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.setup.outputs.branch }}

      # Download all snapshot artifacts from shards
      - name: Download all snapshots
        uses: actions/download-artifact@v4
        with:
          pattern: snapshots-shard-*
          path: ./downloaded-snapshots
          merge-multiple: false

      - name: Log downloaded artifacts structure
        run: |
          echo "=== DOWNLOADED ARTIFACTS STRUCTURE ==="
          if [ -d "./downloaded-snapshots" ]; then
            echo "Root of downloaded-snapshots:"
            ls -laR ./downloaded-snapshots | head -100
            echo ""
            echo "Total files in downloaded-snapshots:"
            find ./downloaded-snapshots -type f | wc -l
            echo ""
            echo "Sample files:"
            find ./downloaded-snapshots -type f | head -20
          else
            echo "::warning::downloaded-snapshots directory does not exist"
          fi

      # Merge snapshots from all shards into browser_tests directory
      - name: Merge snapshots
        run: |
          set -euo pipefail

          echo "=========================================="
          echo "STARTING MERGE SNAPSHOTS PROCESS"
          echo "=========================================="

          # Verify target directory exists
          if [ ! -d "browser_tests" ]; then
            echo "::error::Target directory 'browser_tests' does not exist"
            exit 1
          fi
          echo "✓ Target directory browser_tests exists"

          # List all downloaded artifacts for debugging
          echo ""
          echo "Available shard artifacts:"
          ls -la ./downloaded-snapshots/ || echo "::warning::No downloaded-snapshots directory found"

          merged_count=0
          skipped_count=0
          total_files_before=$(find browser_tests -type f 2>/dev/null | wc -l || echo 0)
          echo "Total files in browser_tests before merge: $total_files_before"

          echo ""
          echo "Processing shard directories..."
          for shard_dir in ./downloaded-snapshots/snapshots-shard-*; do
            echo ""
            echo "--- Processing: $shard_dir ---"

            # Check if glob matched any directories
            if [ ! -e "$shard_dir" ]; then
              echo "::warning::No shard directories found matching pattern"
              break
            fi

            if [ ! -d "$shard_dir" ]; then
              echo "::warning::Expected directory but found file: $shard_dir"
              skipped_count=$((skipped_count + 1))
              continue
            fi

            shard_file_count=$(find "$shard_dir" -type f 2>/dev/null | wc -l || echo 0)
            echo "Files in this shard: $shard_file_count"

            # Check if directory has content (empty is OK - shard might have no changes)
            if [ -z "$(ls -A "$shard_dir" 2>/dev/null)" ]; then
              echo "ℹ Shard directory is empty (no snapshots updated in this shard)"
              skipped_count=$((skipped_count + 1))
              continue
            fi

            echo "Content structure of $shard_dir:"
            find "$shard_dir" -type f | head -10

            echo ""
            echo "Merging snapshots from $shard_dir into browser_tests/..."

            # The artifact path 'browser_tests/**/*-snapshots/' uploads relative to browser_tests/
            # So downloaded artifacts contain 'tests/' directly, not 'browser_tests/tests/'
            # We need to merge the artifact contents into browser_tests/
            if ! rsync -av "$shard_dir/" browser_tests/ 2>&1 | tail -20; then
              echo "::error::Failed to merge snapshots from $shard_dir/ to browser_tests/"
              echo "Contents of $shard_dir:"
              find "$shard_dir" -type f | head -20
              exit 1
            fi
            merged_count=$((merged_count + 1))
            echo "✓ Successfully merged shard $merged_count"
          done

          total_files_after=$(find browser_tests -type f 2>/dev/null | wc -l || echo 0)
          files_added=$((total_files_after - total_files_before))
          
          echo ""
          echo "=========================================="
          echo "MERGE COMPLETE"
          echo "=========================================="
          echo "Merged shard(s): $merged_count"
          echo "Skipped shard(s): $skipped_count"
          echo "Files before: $total_files_before"
          echo "Files after: $total_files_after"
          echo "Files added/modified: $files_added"

      - name: Pre-commit git status
        run: |
          echo "=========================================="
          echo "PRE-COMMIT GIT STATUS"
          echo "=========================================="
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Current commit: $(git rev-parse HEAD)"
          echo ""
          echo "Git status:"
          git status
          echo ""
          echo "Untracked and modified files in browser_tests:"
          git status browser_tests
          echo ""
          echo "Detailed changes:"
          git diff --name-status browser_tests | head -30 || echo "No unstaged changes"
          echo ""
          echo "File count in browser_tests:"
          find browser_tests -type f | wc -l

      - name: Stage changes
        run: |
          echo "=========================================="
          echo "STAGING CHANGES"
          echo "=========================================="
          echo "Running: git add browser_tests"
          git add browser_tests
          echo "✓ Add command completed"
          echo ""
          echo "Staged changes:"
          git diff --cached --name-status | head -50 || echo "No staged changes"
          echo ""
          echo "Staged file count:"
          git diff --cached --name-only | wc -l
          echo ""
          echo "Detailed staged diff (first 50 lines):"
          git diff --cached --stat browser_tests

      - name: Check diff and prepare commit
        id: check-changes
        run: |
          echo "=========================================="
          echo "CHECKING FOR CHANGES TO COMMIT"
          echo "=========================================="
          if git diff --cached --quiet; then
            echo "✓ No changes detected in staged files"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "✓ Changes detected!"
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo ""
            echo "Summary of staged changes:"
            git diff --cached --stat
            echo ""
            echo "First 100 lines of diff:"
            git diff --cached | head -100
          fi

      - name: Commit changes
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          echo "=========================================="
          echo "COMMITTING CHANGES"
          echo "=========================================="
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          echo "Git config set for: github-actions (github-actions@github.com)"
          echo ""
          echo "Running commit..."
          if git commit -m "[automated] Update test expectations"; then
            echo "✓ Commit successful"
            echo ""
            echo "Commit details:"
            git log -1 --stat
          else
            echo "::error::Commit failed"
            exit 1
          fi

      - name: Push changes
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          echo "=========================================="
          echo "PUSHING CHANGES"
          echo "=========================================="
          echo "Target branch: ${{ needs.setup.outputs.branch }}"
          echo "Repository: ${{ github.repository }}"
          echo ""
          echo "Current branch after commit:"
          git log --oneline -3
          echo ""
          echo "Pushing to origin ${{ needs.setup.outputs.branch }}..."
          if git push origin ${{ needs.setup.outputs.branch }}; then
            echo "✓ Push successful"
          else
            echo "::error::Push failed"
            git log --oneline -1
            exit 1
          fi

      - name: Post-commit verification
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          echo "=========================================="
          echo "POST-COMMIT VERIFICATION"
          echo "=========================================="
          echo "Final git status:"
          git status
          echo ""
          echo "Latest commits:"
          git log --oneline -5

      - name: Add Done Reaction
        uses: peter-evans/create-or-update-comment@e8674b075228eee787fea43ef493e45ece1004c9
        if: github.event_name == 'issue_comment'
        with:
          comment-id: ${{ needs.setup.outputs.comment-id }}
          issue-number: ${{ needs.setup.outputs.pr-number }}
          reactions: +1
          reactions-edit-mode: replace

      - name: Remove New Browser Test Expectations label
        if: always() && github.event_name == 'pull_request'
        run: gh pr edit ${{ needs.setup.outputs.pr-number }} --remove-label "New Browser Test Expectations"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
